#!/usr/bin/python
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/..')
from filetools import RegenerateFile

# read NEWS file line by line
# create elements/news.html

filename = "NEWS"

ENTRY_PREFIX = "Version "
ITEM_PREFIX = "* "
SUBITEM_PREFIX = "\t- "

file_r = open(filename, "r")
if not file_r:
	print("Can't open file %s for reading" % filename)
	exit(1)

file_w = RegenerateFile("elements/news.html")
file_w.print('<h1>Latest News</h1>')

has_any_entry = False
last_item = None
last_subitems = None
while True:
	line = file_r.readline()
	is_eof = line == ""
	line = line.rstrip()

	is_new_entry = line.startswith(ENTRY_PREFIX)
	is_new_item = line.startswith(ITEM_PREFIX)
	is_new_subitem = line.startswith(SUBITEM_PREFIX)
	should_close_item = last_item and (is_eof or is_new_entry or is_new_item)
	should_close_entry = has_any_entry and (is_eof or is_new_entry)

	def assert_line(cond, error):
		if not cond:
			print("Error: %s. Exiting" % error)
			print("\tLine: %s" % line)
			exit(1)

	if should_close_item:
		if last_subitems:
			file_w.print("<ul>")
			for subitem in last_subitems:
				file_w.print("\t\t<li>%s</li>" % subitem)
			file_w.write("\t</ul>")
		file_w.print("</li>")

	if should_close_entry:
		file_w.print("</ul>")

	if is_eof:
		break
	elif is_new_entry:
		file_w.print("\n<h2>%s</h2>\n<ul>" % line)
		has_any_entry = True
		last_item = None
		last_subitems = None
	elif is_new_item:
		assert_line(has_any_entry, "Item line without Version line")
		last_item = line.lstrip(ITEM_PREFIX)
		last_subitems = []
		file_w.write("\t<li>%s" % last_item)
	elif is_new_subitem:
		assert_line(has_any_entry, "Subitem line without Version line")
		assert_line(last_item, "Subitem line without item line")
		last_subitems.append(line.lstrip(SUBITEM_PREFIX))
	else:
		# ignore all empty or unsupported lines
		pass

if not has_any_entry:
	print("Error: Failed to find any entries in file %s, check format" % filename)

file_r.close()
file_w.finalize()
